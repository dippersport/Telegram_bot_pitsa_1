# from aiogram import F, types, Router
# from aiogram.enums import ParseMode
# from aiogram.filters import CommandStart, Command, or_f
# from aiogram.utils.formatting import as_list, as_marked_section, Bold #Italic, as_numbered_list –∏ —Ç–¥ 

# from filters.chat_types import ChatTypeFilter

# from kbds.reply import get_keyboard
# from kbds import reply

# user_private_router = Router()
# user_private_router.message.filter(ChatTypeFilter(["private"]))


# @user_private_router.message(CommandStart())
# async def start_cmd(message: types.Message):
#     await message.answer(
#         "–ü—Ä–∏–≤–µ—Ç, —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
#         reply_markup=get_keyboard(
#             "–ú–µ–Ω—é",
#             "–û –º–∞–≥–∞–∑–∏–Ω–µ",
#             "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã",
#             "–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏",
#             placeholder="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
#             sizes=(2, 2)
#         ),
#     )


# # @user_private_router.message(F.text.lower() == "–º–µ–Ω—é")
# @user_private_router.message(or_f(Command("menu"), (F.text.lower() == "–º–µ–Ω—é")))
# async def menu_cmd(message: types.Message):

#     text = as_marked_section(
#             Bold("–ú–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏: "),
#             "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞: –°–æ—É—Å —Ç–æ–º–∞—Ç–Ω—ã–π, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–æ–º–∏–¥–æ—Ä—ã, –±–∞–∑–∏–ª–∏–∫.",
#             "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏: –°–æ—É—Å —Ç–æ–º–∞—Ç–Ω—ã–π, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–µ–ø–ø–µ—Ä–æ–Ω–∏.",
#             "–ì–∞–≤–∞–π—Å–∫–∞—è: –°–æ—É—Å —Ç–æ–º–∞—Ç–Ω—ã–π, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –≤–µ—Ç—á–∏–Ω–∞, –∞–Ω–∞–Ω–∞—Å—ã.",
#             "–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞: –°–æ—É—Å —Å–ª–∏–≤–æ—á–Ω—ã–π, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –ø–∞—Ä–º–µ–∑–∞–Ω, –≥–æ—Ä–≥–æ–Ω–∑–æ–ª–∞, –¥–æ—Ä-–±–ª—é.",
#             "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è: –°–æ—É—Å —Ç–æ–º–∞—Ç–Ω—ã–π, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —à–∞–º–ø–∏–Ω—å–æ–Ω—ã, –ø–µ—Ä–µ—Ü, –ª—É–∫, –æ–ª–∏–≤–∫–∏.",
#             "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è: –°–æ—É—Å —Ç–æ–º–∞—Ç–Ω—ã–π, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, —Ñ–∞—Ä—à –≥–æ–≤—è–∂–∏–π, –æ—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ü, –ª—É–∫, –ø–µ—Ä–µ—Ü —á–∏–ª–∏.",
#             "–ö–∞–ª—å—Ü–æ–Ω–µ: –°–æ—É—Å —Ç–æ–º–∞—Ç–Ω—ã–π, –º–æ—Ü–∞—Ä–µ–ª–ª–∞, –≤–µ—Ç—á–∏–Ω–∞, –≥—Ä–∏–±—ã, –ø–æ–º–∏–¥–æ—Ä—ã, –ª—É–∫, –ø–µ—Ä–µ—Ü.",
#             marker='‚úÖ, ü§ó '
#         )

#     await message.answer(text.as_html())


# @user_private_router.message(F.text.lower() == "–æ –º–∞–≥–∞–∑–∏–Ω–µ")
# @user_private_router.message(Command("about"))
# async def about_cmd(message: types.Message):

#     text = as_marked_section(
#             Bold("–ú–∞–≥–∞–∑–∏–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ:"),
#             "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–ª—è –≤–∞—Å",
#             "–ñ–¥–µ–º –≤–∞—Å",
#             "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏ —á–∏—Å—Ç–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ",
#             marker='‚úÖ, üôÇ '
#         )

#     await message.answer(text.as_html())


# @user_private_router.message(F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã")
# @user_private_router.message(Command("payment"))
# async def payment_cmd(message: types.Message):

#     text = as_marked_section(
#             Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:"),
#             "–ö–∞—Ä—Ç–æ–π –≤ –±–æ—Ç–µ",
#             "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∞/–∫–µ—à",
#             "–í –∑–∞–≤–µ–¥–µ–Ω–∏–∏",
#             marker='‚úÖ '
#         )
#     await message.answer(text.as_html())


# @user_private_router.message(
#     (F.text.lower().contains("–¥–æ—Å—Ç–∞–≤–∫")) | (F.text.lower() == "–≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
# )
# @user_private_router.message(Command("shipping"))
# async def menu_cmd(message: types.Message):
#     text = as_list(
#         as_marked_section(
#             Bold("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏/–∑–∞–∫–∞–∑–∞:"),
#             "–ö—É—Ä—å–µ—Ä",
#             "–°–∞–º–æ–≤—ã–Ω–æ—Å (—Å–µ–π—á–∞—Å –ø—Ä–∏–±–µ–≥—É –∑–∞–±–µ—Ä—É)",
#             "–ü–æ–∫—É—à–∞—é —É –í–∞—Å (—Å–µ–π—á–∞—Å –ø—Ä–∏–±–µ–≥—É)",
#             marker='‚úÖ '
#         ),
#         as_marked_section(
#             Bold("–ù–µ–ª—å–∑—è:"),
#             "–ü–æ—á—Ç–∞",
#             "–ì–æ–ª—É–±–∏",
#             marker='‚ùå '
#         ),
#         sep='\n----------------------\n'
#     )
#     await message.answer(text.as_html())


# @user_private_router.message(F.contact)
# async def get_contact(message: types.Message):
#     await message.answer(f"–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω")
#     await message.answer(str(message.contact))


# @user_private_router.message(F.location)
# async def get_location(message: types.Message):
#     await message.answer(f"–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
#     await message.answer(str(message.location))
from aiogram import F, types, Router
from aiogram.filters import CommandStart

from sqlalchemy.ext.asyncio import AsyncSession
from database.orm_query import (
    orm_add_to_cart,
    orm_add_user,
)

from filters.chat_types import ChatTypeFilter
from handlers.menu_processing import get_menu_content
from kbds.inline import MenuCallBack, get_callback_btns



user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession):
    media, reply_markup = await get_menu_content(session, level=0, menu_name="main")

    await message.answer_photo(media.media, caption=media.caption, reply_markup=reply_markup)


async def add_to_cart(callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession):
    user = callback.from_user
    await orm_add_user(
        session,
        user_id=user.id,
        first_name=user.first_name,
        last_name=user.last_name,
        phone=None,
    )
    await orm_add_to_cart(session, user_id=user.id, product_id=callback_data.product_id)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")


@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(callback: types.CallbackQuery, callback_data: MenuCallBack, session: AsyncSession):

    if callback_data.menu_name == "add_to_cart":
        await add_to_cart(callback, callback_data, session)
        return

    media, reply_markup = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        category=callback_data.category,
        page=callback_data.page,
        product_id=callback_data.product_id,
        user_id=callback.from_user.id,
    )

    await callback.message.edit_media(media=media, reply_markup=reply_markup)
    await callback.answer()

